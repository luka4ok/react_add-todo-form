{"version":3,"sources":["api/users.ts","api/todos.ts","components/TodoForm/TodoForm.tsx","utils/todoUtils.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","TodoForm","onSubmit","users","useState","postTitle","setPostTitle","hasPostTitleError","setHasPostTitleError","selectedUser","setSelectedUser","hasSelectError","setHasSelectError","action","method","e","preventDefault","trim","className","type","placeholder","value","onChange","target","disabled","map","user","getNewPostId","todos","Math","max","todo","UserInfo","href","TodoInfo","find","getUserById","TodoList","App","todosFromServer","setTodos","newTodo","currentTodos","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8b2741f.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport { Todo } from '../../types/todo';\nimport { User } from '../../types/user';\n\ninterface Props {\n  onSubmit: (todo: Todo) => void;\n  users: User[];\n}\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit, users }) => {\n  const [postTitle, setPostTitle] = useState('');\n  const [hasPostTitleError, setHasPostTitleError] = useState(false);\n\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [hasSelectError, setHasSelectError] = useState(false);\n\n  function handleTitleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setPostTitle(e.target.value);\n    setHasPostTitleError(false);\n  }\n\n  function handleUserChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setSelectedUser(+e.target.value);\n    setHasSelectError(false);\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    setHasPostTitleError(!postTitle.trim());\n    setHasSelectError(!selectedUser);\n\n    if (postTitle.trim() && selectedUser) {\n      onSubmit({\n        id: 0,\n        title: postTitle,\n        completed: false,\n        userId: selectedUser,\n      });\n      setPostTitle('');\n      setSelectedUser(0);\n    }\n  }\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={postTitle}\n          onChange={handleTitleChange}\n        />\n        {hasPostTitleError\n          && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={selectedUser}\n          onChange={handleUserChange}\n        >\n          <option value={0} disabled>\n            Choose a user\n          </option>\n          {users.map((user) => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n        {hasSelectError && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { Todo } from '../types/todo';\nimport { User } from '../types/user';\n\nexport const getNewPostId = (todos: Todo[]) => {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n};\n\nexport const getUserById = (users: User[], id: number): User | null => {\n  return users.find((user) => user.id === id) || null;\n};\n","import React from 'react';\nimport { User } from '../../types/user';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { Todo } from '../../types/todo';\nimport { getUserById } from '../../utils/todoUtils';\nimport { UserInfo } from '../UserInfo';\nimport users from '../../api/users';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const user = getUserById(users, userId);\n\n  return (\n    <article data-id={id} className={`TodoInfo ${completed && 'TodoInfo--completed'}`}>\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => <TodoInfo todo={todo} key={todo.id} />)}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { Todo } from './types/todo';\nimport { getNewPostId } from './utils/todoUtils';\nimport { TodoList } from './components/TodoList';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const onAddTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewPostId(todos),\n    };\n\n    setTodos((currentTodos) => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <TodoForm onSubmit={onAddTodo} users={usersFromServer} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}